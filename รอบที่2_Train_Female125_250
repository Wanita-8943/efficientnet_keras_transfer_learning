{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Wanita-8943/efficientnet_keras_transfer_learning/blob/master/%E0%B8%A3%E0%B8%AD%E0%B8%9A%E0%B8%97%E0%B8%B5%E0%B9%882_Train_Female125_250\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##เรียกใช้ CSV"
      ],
      "metadata": {
        "id": "8vYOj7qs68CC"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 165,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-WlXPl93BpDM",
        "outputId": "325cf4c6-e19a-4e05-9e63-1637083e56a5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np"
      ],
      "metadata": {
        "id": "vCxtnct6BtlL"
      },
      "execution_count": 166,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras import models\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers\n",
        "from tensorflow.keras import optimizers\n",
        "import os\n",
        "import glob\n",
        "import shutil\n",
        "import sys\n",
        "import numpy as np\n",
        "from skimage.io import imread\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython.display import Image\n",
        "%matplotlib inline"
      ],
      "metadata": {
        "id": "lfTEIu7azxzO"
      },
      "execution_count": 167,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "%cd /content\n",
        "if not os.path.isdir(\"efficientnet_keras_transfer_learning\"):\n",
        " !git clone https://github.com/Wanita-8943/efficientnet_keras_transfer_learning\n",
        "%cd efficientnet_keras_transfer_learning/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vwAfx2vRCdxm",
        "outputId": "334d152d-138b-43d4-f189-c8bcde3cb650"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content\n",
            "/content/efficientnet_keras_transfer_learning\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv (r'/content/drive/MyDrive/cut_panoramic/Data/Data_Female_125.csv')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "1RiTwdWRBvgU",
        "outputId": "70feed2a-ccfa-47ce-92cb-d225cf0cb9c4"
      },
      "execution_count": 169,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Fig_Age  Fig_Person_Sex  Age(year) Class       Filename  \\\n",
              "0           1               1          7  Y07F         V1.jpg   \n",
              "1           2               1          7  Y07F    Flip_V1.jpg   \n",
              "2           3               2          7  Y07F         V2.jpg   \n",
              "3           4               2          7  Y07F    Flip_V2.jpg   \n",
              "4           5               3          7  Y07F         V3.jpg   \n",
              "...       ...             ...        ...   ...            ...   \n",
              "2370      121              65         25  Y25F  Flip_J145.jpg   \n",
              "2371      122              66         25  Y25F  Flip_J149.jpg   \n",
              "2372      123              67         25  Y25F  Flip_J158.jpg   \n",
              "2373      124              68         25  Y25F  Flip_J177.jpg   \n",
              "2374      125              69         25  Y25F  Flip_J180.jpg   \n",
              "\n",
              "                                          Path_filename      Sex Floder  \n",
              "0     /content/drive/My Drive/cut_panoramic/7 year/7...  เพศหญิง   Both  \n",
              "1     /content/drive/My Drive/cut_panoramic/7 year/7...  เพศหญิง   Both  \n",
              "2     /content/drive/My Drive/cut_panoramic/7 year/7...  เพศหญิง   Both  \n",
              "3     /content/drive/My Drive/cut_panoramic/7 year/7...  เพศหญิง   Both  \n",
              "4     /content/drive/My Drive/cut_panoramic/7 year/7...  เพศหญิง   Both  \n",
              "...                                                 ...      ...    ...  \n",
              "2370  /content/drive/My Drive/cut_panoramic/25 year/...  เพศหญิง     Lt  \n",
              "2371  /content/drive/My Drive/cut_panoramic/25 year/...  เพศหญิง     Lt  \n",
              "2372  /content/drive/My Drive/cut_panoramic/25 year/...  เพศหญิง     Lt  \n",
              "2373  /content/drive/My Drive/cut_panoramic/25 year/...  เพศหญิง     Lt  \n",
              "2374  /content/drive/My Drive/cut_panoramic/25 year/...  เพศหญิง     Lt  \n",
              "\n",
              "[2375 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-25bc5db4-336f-426b-bf8b-caf46c4dd355\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Fig_Age</th>\n",
              "      <th>Fig_Person_Sex</th>\n",
              "      <th>Age(year)</th>\n",
              "      <th>Class</th>\n",
              "      <th>Filename</th>\n",
              "      <th>Path_filename</th>\n",
              "      <th>Sex</th>\n",
              "      <th>Floder</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>Y07F</td>\n",
              "      <td>V1.jpg</td>\n",
              "      <td>/content/drive/My Drive/cut_panoramic/7 year/7...</td>\n",
              "      <td>เพศหญิง</td>\n",
              "      <td>Both</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>7</td>\n",
              "      <td>Y07F</td>\n",
              "      <td>Flip_V1.jpg</td>\n",
              "      <td>/content/drive/My Drive/cut_panoramic/7 year/7...</td>\n",
              "      <td>เพศหญิง</td>\n",
              "      <td>Both</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>Y07F</td>\n",
              "      <td>V2.jpg</td>\n",
              "      <td>/content/drive/My Drive/cut_panoramic/7 year/7...</td>\n",
              "      <td>เพศหญิง</td>\n",
              "      <td>Both</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>Y07F</td>\n",
              "      <td>Flip_V2.jpg</td>\n",
              "      <td>/content/drive/My Drive/cut_panoramic/7 year/7...</td>\n",
              "      <td>เพศหญิง</td>\n",
              "      <td>Both</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>7</td>\n",
              "      <td>Y07F</td>\n",
              "      <td>V3.jpg</td>\n",
              "      <td>/content/drive/My Drive/cut_panoramic/7 year/7...</td>\n",
              "      <td>เพศหญิง</td>\n",
              "      <td>Both</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2370</th>\n",
              "      <td>121</td>\n",
              "      <td>65</td>\n",
              "      <td>25</td>\n",
              "      <td>Y25F</td>\n",
              "      <td>Flip_J145.jpg</td>\n",
              "      <td>/content/drive/My Drive/cut_panoramic/25 year/...</td>\n",
              "      <td>เพศหญิง</td>\n",
              "      <td>Lt</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2371</th>\n",
              "      <td>122</td>\n",
              "      <td>66</td>\n",
              "      <td>25</td>\n",
              "      <td>Y25F</td>\n",
              "      <td>Flip_J149.jpg</td>\n",
              "      <td>/content/drive/My Drive/cut_panoramic/25 year/...</td>\n",
              "      <td>เพศหญิง</td>\n",
              "      <td>Lt</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2372</th>\n",
              "      <td>123</td>\n",
              "      <td>67</td>\n",
              "      <td>25</td>\n",
              "      <td>Y25F</td>\n",
              "      <td>Flip_J158.jpg</td>\n",
              "      <td>/content/drive/My Drive/cut_panoramic/25 year/...</td>\n",
              "      <td>เพศหญิง</td>\n",
              "      <td>Lt</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2373</th>\n",
              "      <td>124</td>\n",
              "      <td>68</td>\n",
              "      <td>25</td>\n",
              "      <td>Y25F</td>\n",
              "      <td>Flip_J177.jpg</td>\n",
              "      <td>/content/drive/My Drive/cut_panoramic/25 year/...</td>\n",
              "      <td>เพศหญิง</td>\n",
              "      <td>Lt</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2374</th>\n",
              "      <td>125</td>\n",
              "      <td>69</td>\n",
              "      <td>25</td>\n",
              "      <td>Y25F</td>\n",
              "      <td>Flip_J180.jpg</td>\n",
              "      <td>/content/drive/My Drive/cut_panoramic/25 year/...</td>\n",
              "      <td>เพศหญิง</td>\n",
              "      <td>Lt</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2375 rows × 8 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-25bc5db4-336f-426b-bf8b-caf46c4dd355')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-25bc5db4-336f-426b-bf8b-caf46c4dd355 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-25bc5db4-336f-426b-bf8b-caf46c4dd355');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 169
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import sys\n",
        "sys.path.append('/content/drive/MyDrive/cut_panoramic/Model/รอบแรก_Flimpano_Female125_250.h5')\n",
        "\n",
        "from efficientnet.layers import Swish, DropConnect\n",
        "from efficientnet.model import ConvKernalInitializer\n",
        "from tensorflow.keras.utils import get_custom_objects\n",
        "\n",
        "get_custom_objects().update({\n",
        "    'ConvKernalInitializer': ConvKernalInitializer,\n",
        "    'Swish': Swish,\n",
        "    'DropConnect':DropConnect\n",
        "})"
      ],
      "metadata": {
        "id": "Sa_dq25vCUfN"
      },
      "execution_count": 170,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "base_dir = '/content/drive/MyDrive/TVT_Female125'\n",
        "os.makedirs(base_dir, exist_ok=True)\n",
        "\n",
        "# Directories for our training,\n",
        "# validation and test splits\n",
        "train_dir = os.path.join(base_dir, 'train')\n",
        "os.makedirs(train_dir, exist_ok=True)\n",
        "validation_dir = os.path.join(base_dir, 'validation')\n",
        "os.makedirs(validation_dir, exist_ok=True)\n",
        "test_dir = os.path.join(base_dir, 'test')\n",
        "os.makedirs(test_dir, exist_ok=True)"
      ],
      "metadata": {
        "id": "IPwibaNFDfcS"
      },
      "execution_count": 171,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "batch_size = 16\n",
        "width = 150\n",
        "height = 150\n",
        "epochs = 250\n",
        "NUM_TRAIN = 1425\n",
        "NUM_TEST = 475\n",
        "dropout_rate = 0.2\n",
        "input_shape = (height, width, 3)"
      ],
      "metadata": {
        "id": "7e5w9zl4z9pH"
      },
      "execution_count": 172,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "4r49Qxp8Xhju"
      },
      "execution_count": 172,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import load_model\n",
        "model = load_model('/content/drive/MyDrive/cut_panoramic/Model/รอบแรก_Flimpano_Female125_250.h5')\n",
        "height = width = model.input_shape[1]"
      ],
      "metadata": {
        "id": "dDq_RhxuB3US"
      },
      "execution_count": 173,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Options: EfficientNetB0, EfficientNetB1, EfficientNetB2, EfficientNetB3\n",
        "# Higher the number, the more complex the model is.\n",
        "from efficientnet import EfficientNetB0 as Net\n",
        "from efficientnet import center_crop_and_resize, preprocess_input"
      ],
      "metadata": {
        "id": "uGFgT8YbP5RE"
      },
      "execution_count": 174,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# loading pretrained conv base model\n",
        "# โหลดโมเดล มาโดยตัด output ของโมเดลออก เเต่ยังใช้ input อันเดิม\n",
        "# เเละโหลด weight ของโมเดล มาด้วยที่ชื่อว่า imagenet\n",
        "conv_base = Net(weights='imagenet', include_top=False, input_shape=input_shape)"
      ],
      "metadata": {
        "id": "6pJBsgmUPdWo"
      },
      "execution_count": 175,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "conv_base.summary() #ดู Summary"
      ],
      "metadata": {
        "id": "9v7PuxJ0QDW-",
        "outputId": "4d8809a6-bf0a-457f-84a1-58acf71b1b43",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 176,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"efficientnet-b0\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                   Output Shape         Param #     Connected to                     \n",
            "==================================================================================================\n",
            " input_6 (InputLayer)           [(None, 150, 150, 3  0           []                               \n",
            "                                )]                                                                \n",
            "                                                                                                  \n",
            " conv2d_197 (Conv2D)            (None, 75, 75, 32)   864         ['input_6[0][0]']                \n",
            "                                                                                                  \n",
            " batch_normalization_147 (Batch  (None, 75, 75, 32)  128         ['conv2d_197[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_147 (Swish)              (None, 75, 75, 32)   0           ['batch_normalization_147[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_48 (Depthwise  (None, 75, 75, 32)  288         ['swish_147[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_148 (Batch  (None, 75, 75, 32)  128         ['depthwise_conv2d_48[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_148 (Swish)              (None, 75, 75, 32)   0           ['batch_normalization_148[0][0]']\n",
            "                                                                                                  \n",
            " lambda_48 (Lambda)             (None, 1, 1, 32)     0           ['swish_148[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_198 (Conv2D)            (None, 1, 1, 8)      264         ['lambda_48[0][0]']              \n",
            "                                                                                                  \n",
            " swish_149 (Swish)              (None, 1, 1, 8)      0           ['conv2d_198[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_199 (Conv2D)            (None, 1, 1, 32)     288         ['swish_149[0][0]']              \n",
            "                                                                                                  \n",
            " activation_48 (Activation)     (None, 1, 1, 32)     0           ['conv2d_199[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_48 (Multiply)         (None, 75, 75, 32)   0           ['activation_48[0][0]',          \n",
            "                                                                  'swish_148[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_200 (Conv2D)            (None, 75, 75, 16)   512         ['multiply_48[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_149 (Batch  (None, 75, 75, 16)  64          ['conv2d_200[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " conv2d_201 (Conv2D)            (None, 75, 75, 96)   1536        ['batch_normalization_149[0][0]']\n",
            "                                                                                                  \n",
            " batch_normalization_150 (Batch  (None, 75, 75, 96)  384         ['conv2d_201[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_150 (Swish)              (None, 75, 75, 96)   0           ['batch_normalization_150[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_49 (Depthwise  (None, 38, 38, 96)  864         ['swish_150[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_151 (Batch  (None, 38, 38, 96)  384         ['depthwise_conv2d_49[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_151 (Swish)              (None, 38, 38, 96)   0           ['batch_normalization_151[0][0]']\n",
            "                                                                                                  \n",
            " lambda_49 (Lambda)             (None, 1, 1, 96)     0           ['swish_151[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_202 (Conv2D)            (None, 1, 1, 4)      388         ['lambda_49[0][0]']              \n",
            "                                                                                                  \n",
            " swish_152 (Swish)              (None, 1, 1, 4)      0           ['conv2d_202[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_203 (Conv2D)            (None, 1, 1, 96)     480         ['swish_152[0][0]']              \n",
            "                                                                                                  \n",
            " activation_49 (Activation)     (None, 1, 1, 96)     0           ['conv2d_203[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_49 (Multiply)         (None, 38, 38, 96)   0           ['activation_49[0][0]',          \n",
            "                                                                  'swish_151[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_204 (Conv2D)            (None, 38, 38, 24)   2304        ['multiply_49[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_152 (Batch  (None, 38, 38, 24)  96          ['conv2d_204[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " conv2d_205 (Conv2D)            (None, 38, 38, 144)  3456        ['batch_normalization_152[0][0]']\n",
            "                                                                                                  \n",
            " batch_normalization_153 (Batch  (None, 38, 38, 144)  576        ['conv2d_205[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_153 (Swish)              (None, 38, 38, 144)  0           ['batch_normalization_153[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_50 (Depthwise  (None, 38, 38, 144)  1296       ['swish_153[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_154 (Batch  (None, 38, 38, 144)  576        ['depthwise_conv2d_50[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_154 (Swish)              (None, 38, 38, 144)  0           ['batch_normalization_154[0][0]']\n",
            "                                                                                                  \n",
            " lambda_50 (Lambda)             (None, 1, 1, 144)    0           ['swish_154[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_206 (Conv2D)            (None, 1, 1, 6)      870         ['lambda_50[0][0]']              \n",
            "                                                                                                  \n",
            " swish_155 (Swish)              (None, 1, 1, 6)      0           ['conv2d_206[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_207 (Conv2D)            (None, 1, 1, 144)    1008        ['swish_155[0][0]']              \n",
            "                                                                                                  \n",
            " activation_50 (Activation)     (None, 1, 1, 144)    0           ['conv2d_207[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_50 (Multiply)         (None, 38, 38, 144)  0           ['activation_50[0][0]',          \n",
            "                                                                  'swish_154[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_208 (Conv2D)            (None, 38, 38, 24)   3456        ['multiply_50[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_155 (Batch  (None, 38, 38, 24)  96          ['conv2d_208[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " drop_connect_27 (DropConnect)  (None, 38, 38, 24)   0           ['batch_normalization_155[0][0]']\n",
            "                                                                                                  \n",
            " add_27 (Add)                   (None, 38, 38, 24)   0           ['drop_connect_27[0][0]',        \n",
            "                                                                  'batch_normalization_152[0][0]']\n",
            "                                                                                                  \n",
            " conv2d_209 (Conv2D)            (None, 38, 38, 144)  3456        ['add_27[0][0]']                 \n",
            "                                                                                                  \n",
            " batch_normalization_156 (Batch  (None, 38, 38, 144)  576        ['conv2d_209[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_156 (Swish)              (None, 38, 38, 144)  0           ['batch_normalization_156[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_51 (Depthwise  (None, 19, 19, 144)  3600       ['swish_156[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_157 (Batch  (None, 19, 19, 144)  576        ['depthwise_conv2d_51[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_157 (Swish)              (None, 19, 19, 144)  0           ['batch_normalization_157[0][0]']\n",
            "                                                                                                  \n",
            " lambda_51 (Lambda)             (None, 1, 1, 144)    0           ['swish_157[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_210 (Conv2D)            (None, 1, 1, 6)      870         ['lambda_51[0][0]']              \n",
            "                                                                                                  \n",
            " swish_158 (Swish)              (None, 1, 1, 6)      0           ['conv2d_210[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_211 (Conv2D)            (None, 1, 1, 144)    1008        ['swish_158[0][0]']              \n",
            "                                                                                                  \n",
            " activation_51 (Activation)     (None, 1, 1, 144)    0           ['conv2d_211[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_51 (Multiply)         (None, 19, 19, 144)  0           ['activation_51[0][0]',          \n",
            "                                                                  'swish_157[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_212 (Conv2D)            (None, 19, 19, 40)   5760        ['multiply_51[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_158 (Batch  (None, 19, 19, 40)  160         ['conv2d_212[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " conv2d_213 (Conv2D)            (None, 19, 19, 240)  9600        ['batch_normalization_158[0][0]']\n",
            "                                                                                                  \n",
            " batch_normalization_159 (Batch  (None, 19, 19, 240)  960        ['conv2d_213[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_159 (Swish)              (None, 19, 19, 240)  0           ['batch_normalization_159[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_52 (Depthwise  (None, 19, 19, 240)  6000       ['swish_159[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_160 (Batch  (None, 19, 19, 240)  960        ['depthwise_conv2d_52[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_160 (Swish)              (None, 19, 19, 240)  0           ['batch_normalization_160[0][0]']\n",
            "                                                                                                  \n",
            " lambda_52 (Lambda)             (None, 1, 1, 240)    0           ['swish_160[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_214 (Conv2D)            (None, 1, 1, 10)     2410        ['lambda_52[0][0]']              \n",
            "                                                                                                  \n",
            " swish_161 (Swish)              (None, 1, 1, 10)     0           ['conv2d_214[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_215 (Conv2D)            (None, 1, 1, 240)    2640        ['swish_161[0][0]']              \n",
            "                                                                                                  \n",
            " activation_52 (Activation)     (None, 1, 1, 240)    0           ['conv2d_215[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_52 (Multiply)         (None, 19, 19, 240)  0           ['activation_52[0][0]',          \n",
            "                                                                  'swish_160[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_216 (Conv2D)            (None, 19, 19, 40)   9600        ['multiply_52[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_161 (Batch  (None, 19, 19, 40)  160         ['conv2d_216[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " drop_connect_28 (DropConnect)  (None, 19, 19, 40)   0           ['batch_normalization_161[0][0]']\n",
            "                                                                                                  \n",
            " add_28 (Add)                   (None, 19, 19, 40)   0           ['drop_connect_28[0][0]',        \n",
            "                                                                  'batch_normalization_158[0][0]']\n",
            "                                                                                                  \n",
            " conv2d_217 (Conv2D)            (None, 19, 19, 240)  9600        ['add_28[0][0]']                 \n",
            "                                                                                                  \n",
            " batch_normalization_162 (Batch  (None, 19, 19, 240)  960        ['conv2d_217[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_162 (Swish)              (None, 19, 19, 240)  0           ['batch_normalization_162[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_53 (Depthwise  (None, 10, 10, 240)  2160       ['swish_162[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_163 (Batch  (None, 10, 10, 240)  960        ['depthwise_conv2d_53[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_163 (Swish)              (None, 10, 10, 240)  0           ['batch_normalization_163[0][0]']\n",
            "                                                                                                  \n",
            " lambda_53 (Lambda)             (None, 1, 1, 240)    0           ['swish_163[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_218 (Conv2D)            (None, 1, 1, 10)     2410        ['lambda_53[0][0]']              \n",
            "                                                                                                  \n",
            " swish_164 (Swish)              (None, 1, 1, 10)     0           ['conv2d_218[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_219 (Conv2D)            (None, 1, 1, 240)    2640        ['swish_164[0][0]']              \n",
            "                                                                                                  \n",
            " activation_53 (Activation)     (None, 1, 1, 240)    0           ['conv2d_219[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_53 (Multiply)         (None, 10, 10, 240)  0           ['activation_53[0][0]',          \n",
            "                                                                  'swish_163[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_220 (Conv2D)            (None, 10, 10, 80)   19200       ['multiply_53[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_164 (Batch  (None, 10, 10, 80)  320         ['conv2d_220[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " conv2d_221 (Conv2D)            (None, 10, 10, 480)  38400       ['batch_normalization_164[0][0]']\n",
            "                                                                                                  \n",
            " batch_normalization_165 (Batch  (None, 10, 10, 480)  1920       ['conv2d_221[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_165 (Swish)              (None, 10, 10, 480)  0           ['batch_normalization_165[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_54 (Depthwise  (None, 10, 10, 480)  4320       ['swish_165[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_166 (Batch  (None, 10, 10, 480)  1920       ['depthwise_conv2d_54[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_166 (Swish)              (None, 10, 10, 480)  0           ['batch_normalization_166[0][0]']\n",
            "                                                                                                  \n",
            " lambda_54 (Lambda)             (None, 1, 1, 480)    0           ['swish_166[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_222 (Conv2D)            (None, 1, 1, 20)     9620        ['lambda_54[0][0]']              \n",
            "                                                                                                  \n",
            " swish_167 (Swish)              (None, 1, 1, 20)     0           ['conv2d_222[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_223 (Conv2D)            (None, 1, 1, 480)    10080       ['swish_167[0][0]']              \n",
            "                                                                                                  \n",
            " activation_54 (Activation)     (None, 1, 1, 480)    0           ['conv2d_223[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_54 (Multiply)         (None, 10, 10, 480)  0           ['activation_54[0][0]',          \n",
            "                                                                  'swish_166[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_224 (Conv2D)            (None, 10, 10, 80)   38400       ['multiply_54[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_167 (Batch  (None, 10, 10, 80)  320         ['conv2d_224[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " drop_connect_29 (DropConnect)  (None, 10, 10, 80)   0           ['batch_normalization_167[0][0]']\n",
            "                                                                                                  \n",
            " add_29 (Add)                   (None, 10, 10, 80)   0           ['drop_connect_29[0][0]',        \n",
            "                                                                  'batch_normalization_164[0][0]']\n",
            "                                                                                                  \n",
            " conv2d_225 (Conv2D)            (None, 10, 10, 480)  38400       ['add_29[0][0]']                 \n",
            "                                                                                                  \n",
            " batch_normalization_168 (Batch  (None, 10, 10, 480)  1920       ['conv2d_225[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_168 (Swish)              (None, 10, 10, 480)  0           ['batch_normalization_168[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_55 (Depthwise  (None, 10, 10, 480)  4320       ['swish_168[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_169 (Batch  (None, 10, 10, 480)  1920       ['depthwise_conv2d_55[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_169 (Swish)              (None, 10, 10, 480)  0           ['batch_normalization_169[0][0]']\n",
            "                                                                                                  \n",
            " lambda_55 (Lambda)             (None, 1, 1, 480)    0           ['swish_169[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_226 (Conv2D)            (None, 1, 1, 20)     9620        ['lambda_55[0][0]']              \n",
            "                                                                                                  \n",
            " swish_170 (Swish)              (None, 1, 1, 20)     0           ['conv2d_226[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_227 (Conv2D)            (None, 1, 1, 480)    10080       ['swish_170[0][0]']              \n",
            "                                                                                                  \n",
            " activation_55 (Activation)     (None, 1, 1, 480)    0           ['conv2d_227[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_55 (Multiply)         (None, 10, 10, 480)  0           ['activation_55[0][0]',          \n",
            "                                                                  'swish_169[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_228 (Conv2D)            (None, 10, 10, 80)   38400       ['multiply_55[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_170 (Batch  (None, 10, 10, 80)  320         ['conv2d_228[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " drop_connect_30 (DropConnect)  (None, 10, 10, 80)   0           ['batch_normalization_170[0][0]']\n",
            "                                                                                                  \n",
            " add_30 (Add)                   (None, 10, 10, 80)   0           ['drop_connect_30[0][0]',        \n",
            "                                                                  'add_29[0][0]']                 \n",
            "                                                                                                  \n",
            " conv2d_229 (Conv2D)            (None, 10, 10, 480)  38400       ['add_30[0][0]']                 \n",
            "                                                                                                  \n",
            " batch_normalization_171 (Batch  (None, 10, 10, 480)  1920       ['conv2d_229[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_171 (Swish)              (None, 10, 10, 480)  0           ['batch_normalization_171[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_56 (Depthwise  (None, 10, 10, 480)  12000      ['swish_171[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_172 (Batch  (None, 10, 10, 480)  1920       ['depthwise_conv2d_56[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_172 (Swish)              (None, 10, 10, 480)  0           ['batch_normalization_172[0][0]']\n",
            "                                                                                                  \n",
            " lambda_56 (Lambda)             (None, 1, 1, 480)    0           ['swish_172[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_230 (Conv2D)            (None, 1, 1, 20)     9620        ['lambda_56[0][0]']              \n",
            "                                                                                                  \n",
            " swish_173 (Swish)              (None, 1, 1, 20)     0           ['conv2d_230[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_231 (Conv2D)            (None, 1, 1, 480)    10080       ['swish_173[0][0]']              \n",
            "                                                                                                  \n",
            " activation_56 (Activation)     (None, 1, 1, 480)    0           ['conv2d_231[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_56 (Multiply)         (None, 10, 10, 480)  0           ['activation_56[0][0]',          \n",
            "                                                                  'swish_172[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_232 (Conv2D)            (None, 10, 10, 112)  53760       ['multiply_56[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_173 (Batch  (None, 10, 10, 112)  448        ['conv2d_232[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " conv2d_233 (Conv2D)            (None, 10, 10, 672)  75264       ['batch_normalization_173[0][0]']\n",
            "                                                                                                  \n",
            " batch_normalization_174 (Batch  (None, 10, 10, 672)  2688       ['conv2d_233[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_174 (Swish)              (None, 10, 10, 672)  0           ['batch_normalization_174[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_57 (Depthwise  (None, 10, 10, 672)  16800      ['swish_174[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_175 (Batch  (None, 10, 10, 672)  2688       ['depthwise_conv2d_57[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_175 (Swish)              (None, 10, 10, 672)  0           ['batch_normalization_175[0][0]']\n",
            "                                                                                                  \n",
            " lambda_57 (Lambda)             (None, 1, 1, 672)    0           ['swish_175[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_234 (Conv2D)            (None, 1, 1, 28)     18844       ['lambda_57[0][0]']              \n",
            "                                                                                                  \n",
            " swish_176 (Swish)              (None, 1, 1, 28)     0           ['conv2d_234[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_235 (Conv2D)            (None, 1, 1, 672)    19488       ['swish_176[0][0]']              \n",
            "                                                                                                  \n",
            " activation_57 (Activation)     (None, 1, 1, 672)    0           ['conv2d_235[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_57 (Multiply)         (None, 10, 10, 672)  0           ['activation_57[0][0]',          \n",
            "                                                                  'swish_175[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_236 (Conv2D)            (None, 10, 10, 112)  75264       ['multiply_57[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_176 (Batch  (None, 10, 10, 112)  448        ['conv2d_236[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " drop_connect_31 (DropConnect)  (None, 10, 10, 112)  0           ['batch_normalization_176[0][0]']\n",
            "                                                                                                  \n",
            " add_31 (Add)                   (None, 10, 10, 112)  0           ['drop_connect_31[0][0]',        \n",
            "                                                                  'batch_normalization_173[0][0]']\n",
            "                                                                                                  \n",
            " conv2d_237 (Conv2D)            (None, 10, 10, 672)  75264       ['add_31[0][0]']                 \n",
            "                                                                                                  \n",
            " batch_normalization_177 (Batch  (None, 10, 10, 672)  2688       ['conv2d_237[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_177 (Swish)              (None, 10, 10, 672)  0           ['batch_normalization_177[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_58 (Depthwise  (None, 10, 10, 672)  16800      ['swish_177[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_178 (Batch  (None, 10, 10, 672)  2688       ['depthwise_conv2d_58[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_178 (Swish)              (None, 10, 10, 672)  0           ['batch_normalization_178[0][0]']\n",
            "                                                                                                  \n",
            " lambda_58 (Lambda)             (None, 1, 1, 672)    0           ['swish_178[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_238 (Conv2D)            (None, 1, 1, 28)     18844       ['lambda_58[0][0]']              \n",
            "                                                                                                  \n",
            " swish_179 (Swish)              (None, 1, 1, 28)     0           ['conv2d_238[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_239 (Conv2D)            (None, 1, 1, 672)    19488       ['swish_179[0][0]']              \n",
            "                                                                                                  \n",
            " activation_58 (Activation)     (None, 1, 1, 672)    0           ['conv2d_239[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_58 (Multiply)         (None, 10, 10, 672)  0           ['activation_58[0][0]',          \n",
            "                                                                  'swish_178[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_240 (Conv2D)            (None, 10, 10, 112)  75264       ['multiply_58[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_179 (Batch  (None, 10, 10, 112)  448        ['conv2d_240[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " drop_connect_32 (DropConnect)  (None, 10, 10, 112)  0           ['batch_normalization_179[0][0]']\n",
            "                                                                                                  \n",
            " add_32 (Add)                   (None, 10, 10, 112)  0           ['drop_connect_32[0][0]',        \n",
            "                                                                  'add_31[0][0]']                 \n",
            "                                                                                                  \n",
            " conv2d_241 (Conv2D)            (None, 10, 10, 672)  75264       ['add_32[0][0]']                 \n",
            "                                                                                                  \n",
            " batch_normalization_180 (Batch  (None, 10, 10, 672)  2688       ['conv2d_241[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_180 (Swish)              (None, 10, 10, 672)  0           ['batch_normalization_180[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_59 (Depthwise  (None, 5, 5, 672)   16800       ['swish_180[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_181 (Batch  (None, 5, 5, 672)   2688        ['depthwise_conv2d_59[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_181 (Swish)              (None, 5, 5, 672)    0           ['batch_normalization_181[0][0]']\n",
            "                                                                                                  \n",
            " lambda_59 (Lambda)             (None, 1, 1, 672)    0           ['swish_181[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_242 (Conv2D)            (None, 1, 1, 28)     18844       ['lambda_59[0][0]']              \n",
            "                                                                                                  \n",
            " swish_182 (Swish)              (None, 1, 1, 28)     0           ['conv2d_242[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_243 (Conv2D)            (None, 1, 1, 672)    19488       ['swish_182[0][0]']              \n",
            "                                                                                                  \n",
            " activation_59 (Activation)     (None, 1, 1, 672)    0           ['conv2d_243[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_59 (Multiply)         (None, 5, 5, 672)    0           ['activation_59[0][0]',          \n",
            "                                                                  'swish_181[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_244 (Conv2D)            (None, 5, 5, 192)    129024      ['multiply_59[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_182 (Batch  (None, 5, 5, 192)   768         ['conv2d_244[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " conv2d_245 (Conv2D)            (None, 5, 5, 1152)   221184      ['batch_normalization_182[0][0]']\n",
            "                                                                                                  \n",
            " batch_normalization_183 (Batch  (None, 5, 5, 1152)  4608        ['conv2d_245[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_183 (Swish)              (None, 5, 5, 1152)   0           ['batch_normalization_183[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_60 (Depthwise  (None, 5, 5, 1152)  28800       ['swish_183[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_184 (Batch  (None, 5, 5, 1152)  4608        ['depthwise_conv2d_60[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_184 (Swish)              (None, 5, 5, 1152)   0           ['batch_normalization_184[0][0]']\n",
            "                                                                                                  \n",
            " lambda_60 (Lambda)             (None, 1, 1, 1152)   0           ['swish_184[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_246 (Conv2D)            (None, 1, 1, 48)     55344       ['lambda_60[0][0]']              \n",
            "                                                                                                  \n",
            " swish_185 (Swish)              (None, 1, 1, 48)     0           ['conv2d_246[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_247 (Conv2D)            (None, 1, 1, 1152)   56448       ['swish_185[0][0]']              \n",
            "                                                                                                  \n",
            " activation_60 (Activation)     (None, 1, 1, 1152)   0           ['conv2d_247[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_60 (Multiply)         (None, 5, 5, 1152)   0           ['activation_60[0][0]',          \n",
            "                                                                  'swish_184[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_248 (Conv2D)            (None, 5, 5, 192)    221184      ['multiply_60[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_185 (Batch  (None, 5, 5, 192)   768         ['conv2d_248[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " drop_connect_33 (DropConnect)  (None, 5, 5, 192)    0           ['batch_normalization_185[0][0]']\n",
            "                                                                                                  \n",
            " add_33 (Add)                   (None, 5, 5, 192)    0           ['drop_connect_33[0][0]',        \n",
            "                                                                  'batch_normalization_182[0][0]']\n",
            "                                                                                                  \n",
            " conv2d_249 (Conv2D)            (None, 5, 5, 1152)   221184      ['add_33[0][0]']                 \n",
            "                                                                                                  \n",
            " batch_normalization_186 (Batch  (None, 5, 5, 1152)  4608        ['conv2d_249[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_186 (Swish)              (None, 5, 5, 1152)   0           ['batch_normalization_186[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_61 (Depthwise  (None, 5, 5, 1152)  28800       ['swish_186[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_187 (Batch  (None, 5, 5, 1152)  4608        ['depthwise_conv2d_61[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_187 (Swish)              (None, 5, 5, 1152)   0           ['batch_normalization_187[0][0]']\n",
            "                                                                                                  \n",
            " lambda_61 (Lambda)             (None, 1, 1, 1152)   0           ['swish_187[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_250 (Conv2D)            (None, 1, 1, 48)     55344       ['lambda_61[0][0]']              \n",
            "                                                                                                  \n",
            " swish_188 (Swish)              (None, 1, 1, 48)     0           ['conv2d_250[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_251 (Conv2D)            (None, 1, 1, 1152)   56448       ['swish_188[0][0]']              \n",
            "                                                                                                  \n",
            " activation_61 (Activation)     (None, 1, 1, 1152)   0           ['conv2d_251[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_61 (Multiply)         (None, 5, 5, 1152)   0           ['activation_61[0][0]',          \n",
            "                                                                  'swish_187[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_252 (Conv2D)            (None, 5, 5, 192)    221184      ['multiply_61[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_188 (Batch  (None, 5, 5, 192)   768         ['conv2d_252[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " drop_connect_34 (DropConnect)  (None, 5, 5, 192)    0           ['batch_normalization_188[0][0]']\n",
            "                                                                                                  \n",
            " add_34 (Add)                   (None, 5, 5, 192)    0           ['drop_connect_34[0][0]',        \n",
            "                                                                  'add_33[0][0]']                 \n",
            "                                                                                                  \n",
            " conv2d_253 (Conv2D)            (None, 5, 5, 1152)   221184      ['add_34[0][0]']                 \n",
            "                                                                                                  \n",
            " batch_normalization_189 (Batch  (None, 5, 5, 1152)  4608        ['conv2d_253[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_189 (Swish)              (None, 5, 5, 1152)   0           ['batch_normalization_189[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_62 (Depthwise  (None, 5, 5, 1152)  28800       ['swish_189[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_190 (Batch  (None, 5, 5, 1152)  4608        ['depthwise_conv2d_62[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_190 (Swish)              (None, 5, 5, 1152)   0           ['batch_normalization_190[0][0]']\n",
            "                                                                                                  \n",
            " lambda_62 (Lambda)             (None, 1, 1, 1152)   0           ['swish_190[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_254 (Conv2D)            (None, 1, 1, 48)     55344       ['lambda_62[0][0]']              \n",
            "                                                                                                  \n",
            " swish_191 (Swish)              (None, 1, 1, 48)     0           ['conv2d_254[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_255 (Conv2D)            (None, 1, 1, 1152)   56448       ['swish_191[0][0]']              \n",
            "                                                                                                  \n",
            " activation_62 (Activation)     (None, 1, 1, 1152)   0           ['conv2d_255[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_62 (Multiply)         (None, 5, 5, 1152)   0           ['activation_62[0][0]',          \n",
            "                                                                  'swish_190[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_256 (Conv2D)            (None, 5, 5, 192)    221184      ['multiply_62[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_191 (Batch  (None, 5, 5, 192)   768         ['conv2d_256[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " drop_connect_35 (DropConnect)  (None, 5, 5, 192)    0           ['batch_normalization_191[0][0]']\n",
            "                                                                                                  \n",
            " add_35 (Add)                   (None, 5, 5, 192)    0           ['drop_connect_35[0][0]',        \n",
            "                                                                  'add_34[0][0]']                 \n",
            "                                                                                                  \n",
            " conv2d_257 (Conv2D)            (None, 5, 5, 1152)   221184      ['add_35[0][0]']                 \n",
            "                                                                                                  \n",
            " batch_normalization_192 (Batch  (None, 5, 5, 1152)  4608        ['conv2d_257[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_192 (Swish)              (None, 5, 5, 1152)   0           ['batch_normalization_192[0][0]']\n",
            "                                                                                                  \n",
            " depthwise_conv2d_63 (Depthwise  (None, 5, 5, 1152)  10368       ['swish_192[0][0]']              \n",
            " Conv2D)                                                                                          \n",
            "                                                                                                  \n",
            " batch_normalization_193 (Batch  (None, 5, 5, 1152)  4608        ['depthwise_conv2d_63[0][0]']    \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_193 (Swish)              (None, 5, 5, 1152)   0           ['batch_normalization_193[0][0]']\n",
            "                                                                                                  \n",
            " lambda_63 (Lambda)             (None, 1, 1, 1152)   0           ['swish_193[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_258 (Conv2D)            (None, 1, 1, 48)     55344       ['lambda_63[0][0]']              \n",
            "                                                                                                  \n",
            " swish_194 (Swish)              (None, 1, 1, 48)     0           ['conv2d_258[0][0]']             \n",
            "                                                                                                  \n",
            " conv2d_259 (Conv2D)            (None, 1, 1, 1152)   56448       ['swish_194[0][0]']              \n",
            "                                                                                                  \n",
            " activation_63 (Activation)     (None, 1, 1, 1152)   0           ['conv2d_259[0][0]']             \n",
            "                                                                                                  \n",
            " multiply_63 (Multiply)         (None, 5, 5, 1152)   0           ['activation_63[0][0]',          \n",
            "                                                                  'swish_193[0][0]']              \n",
            "                                                                                                  \n",
            " conv2d_260 (Conv2D)            (None, 5, 5, 320)    368640      ['multiply_63[0][0]']            \n",
            "                                                                                                  \n",
            " batch_normalization_194 (Batch  (None, 5, 5, 320)   1280        ['conv2d_260[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " conv2d_261 (Conv2D)            (None, 5, 5, 1280)   409600      ['batch_normalization_194[0][0]']\n",
            "                                                                                                  \n",
            " batch_normalization_195 (Batch  (None, 5, 5, 1280)  5120        ['conv2d_261[0][0]']             \n",
            " Normalization)                                                                                   \n",
            "                                                                                                  \n",
            " swish_195 (Swish)              (None, 5, 5, 1280)   0           ['batch_normalization_195[0][0]']\n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 4,049,564\n",
            "Trainable params: 4,007,548\n",
            "Non-trainable params: 42,016\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Train ด้วย ImageDataGenerator ของ Keras ซึ่งจะเพิ่มข้อมูลเสริมระหว่างการฝึกเพื่อลดโอกาสเกิด overfitting\n",
        "#overfitting เกิดจากข้อมูลที่ซับซ้อนกันเกินไป\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "train_datagen = ImageDataGenerator(\n",
        "      rescale=1./255, #โมเดลส่วนใหญ่ต้องใช้ RGB ในช่วง 0–1\n",
        "      rotation_range=40,\n",
        "      width_shift_range=0.2,\n",
        "      height_shift_range=0.2,\n",
        "      shear_range=0.2,\n",
        "      zoom_range=0.2,\n",
        "      horizontal_flip=True,\n",
        "      fill_mode='nearest')\n",
        "\n",
        "# Note that the validation data should not be augmented!\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "        # This is the target directory #ไดเรกเป้าหมาย\n",
        "        train_dir,\n",
        "        # รูปภาพทั้งหมดจะถูกปรับขนาดตามความสูงและความกว้างของเป้าหมาย\n",
        "        target_size=(height, width),\n",
        "        batch_size=batch_size,\n",
        "        # Since we use categorical_crossentropy loss, we need categorical labels\n",
        "        #เนื่องจากเราใช้ categorical_crossentropy loss เราจึงต้องมีป้ายกำกับตามหมวดหมู่\n",
        "        class_mode='categorical')\n",
        "\n",
        "validation_generator = test_datagen.flow_from_directory( #การดึงภาพจาก Directory มาเข้าโมเดล \n",
        "        validation_dir,\n",
        "        target_size=(height, width),\n",
        "        batch_size=batch_size,\n",
        "        class_mode='categorical')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xi1ozW49B_cT",
        "outputId": "1cb8bfaa-d31e-4f8a-f481-d8678c67c1e1"
      },
      "execution_count": 177,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 1425 images belonging to 19 classes.\n",
            "Found 475 images belonging to 19 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = models.Sequential()\n",
        "model.add(conv_base)\n",
        "model.add(layers.GlobalMaxPooling2D(name=\"gap\"))\n",
        "# model.add(layers.Flatten(name=\"flatten\"))\n",
        "if dropout_rate > 0:\n",
        "    model.add(layers.Dropout(dropout_rate, name=\"dropout_out\"))\n",
        "# model.add(layers.Dense(256, activation='relu', name=\"fc1\"))\n",
        "model.add(layers.Dense(19, activation='softmax', name=\"fc_out\"))"
      ],
      "metadata": {
        "id": "SuKlk4C3bA85"
      },
      "execution_count": 179,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "id": "YZdPuThAbE84",
        "outputId": "1c6dc8b4-3e02-4ad8-c78f-2c4d0b7056c5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 180,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " efficientnet-b0 (Functional  (None, 5, 5, 1280)       4049564   \n",
            " )                                                               \n",
            "                                                                 \n",
            " gap (GlobalMaxPooling2D)    (None, 1280)              0         \n",
            "                                                                 \n",
            " dropout_out (Dropout)       (None, 1280)              0         \n",
            "                                                                 \n",
            " fc_out (Dense)              (None, 19)                24339     \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 4,073,903\n",
            "Trainable params: 4,031,887\n",
            "Non-trainable params: 42,016\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('This is the number of trainable layers '\n",
        "      'before freezing the conv base:', len(model.trainable_weights))\n",
        "\n",
        "conv_base.trainable = False\n",
        "\n",
        "print('This is the number of trainable layers '\n",
        "      'after freezing the conv base:', len(model.trainable_weights))"
      ],
      "metadata": {
        "id": "8O6wiRJXQGyB",
        "outputId": "cb473f15-f114-4092-a1ed-9ebe88d8d0bc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 181,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "This is the number of trainable layers before freezing the conv base: 213\n",
            "This is the number of trainable layers after freezing the conv base: 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.callbacks import ModelCheckpoint\n",
        "\n",
        "model.compile(loss='categorical_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(lr=2e-5),\n",
        "              metrics=['acc'])\n",
        "\n",
        "checkpoint_filepath = '/content/drive/MyDrive/cut_panoramic/Model/รอบแรก_Flimpano_Female125_250.h5'\n",
        "if not os.path.exists(checkpoint_filepath) :\n",
        "        os.makedirs(checkpoint_filepath)\n",
        "model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(\n",
        "                                filepath=checkpoint_filepath, save_freq='epoch', ave_weights_only=False)"
      ],
      "metadata": {
        "id": "vi7w47TJ5MRv",
        "outputId": "f32f5ab4-e6c2-4235-d5f1-b9acc86b09b4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 182,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/keras/optimizers/optimizer_v2/rmsprop.py:135: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
            "  super(RMSprop, self).__init__(name, **kwargs)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss='categorical_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(lr=2e-5),\n",
        "              metrics=['acc'])\n",
        "\n",
        "history = model.fit(train_generator,\n",
        "      steps_per_epoch= NUM_TRAIN //batch_size,\n",
        "      epochs=epochs,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps= NUM_TEST //batch_size,\n",
        "      verbose=1,\n",
        "      use_multiprocessing=True,\n",
        "      workers=4,\n",
        "      callbacks = [model_checkpoint_callback] \n",
        "      )"
      ],
      "metadata": {
        "id": "1vr_wgX49VRY",
        "outputId": "5c7eeb8f-183f-4f34-e0ce-38dd2a07aef8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": 185,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/250\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Process Keras_worker_ForkPoolWorker-804:\n",
            "Process Keras_worker_ForkPoolWorker-801:\n",
            "Traceback (most recent call last):\n",
            "Process Keras_worker_ForkPoolWorker-803:\n",
            "  File \"/usr/lib/python3.8/multiprocessing/process.py\", line 315, in _bootstrap\n",
            "    self.run()\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/lib/python3.8/multiprocessing/process.py\", line 108, in run\n",
            "    self._target(*self._args, **self._kwargs)\n",
            "Process Keras_worker_ForkPoolWorker-802:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/lib/python3.8/multiprocessing/process.py\", line 315, in _bootstrap\n",
            "    self.run()\n",
            "  File \"/usr/lib/python3.8/multiprocessing/pool.py\", line 131, in worker\n",
            "    put((job, i, result))\n",
            "  File \"/usr/lib/python3.8/multiprocessing/process.py\", line 108, in run\n",
            "    self._target(*self._args, **self._kwargs)\n",
            "  File \"/usr/lib/python3.8/multiprocessing/process.py\", line 315, in _bootstrap\n",
            "    self.run()\n",
            "KeyboardInterrupt\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/lib/python3.8/multiprocessing/process.py\", line 108, in run\n",
            "    self._target(*self._args, **self._kwargs)\n",
            "  File \"/usr/lib/python3.8/multiprocessing/pool.py\", line 125, in worker\n",
            "    result = (True, func(*args, **kwds))\n",
            "  File \"/usr/lib/python3.8/multiprocessing/process.py\", line 315, in _bootstrap\n",
            "    self.run()\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/utils/data_utils.py\", line 580, in get_index\n",
            "    return _SHARED_SEQUENCES[uid][i]\n",
            "  File \"/usr/lib/python3.8/multiprocessing/pool.py\", line 125, in worker\n",
            "    result = (True, func(*args, **kwds))\n",
            "  File \"/usr/lib/python3.8/multiprocessing/process.py\", line 108, in run\n",
            "    self._target(*self._args, **self._kwargs)\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-185-00cd1e090a1d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m               metrics=['acc'])\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m history = model.fit(train_generator,\n\u001b[0m\u001b[1;32m      6\u001b[0m       \u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mNUM_TRAIN\u001b[0m \u001b[0;34m//\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m       \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1407\u001b[0m                 _r=1):\n\u001b[1;32m   1408\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1409\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1410\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1411\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    913\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    914\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 915\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    917\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    978\u001b[0m         \u001b[0;31m# Lifting succeeded, so variables are initialized and we can run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    979\u001b[0m         \u001b[0;31m# stateless function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 980\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    981\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    982\u001b[0m       _, _, filtered_flat_args = (\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2451\u001b[0m       (graph_function,\n\u001b[1;32m   2452\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[0;32m-> 2453\u001b[0;31m     return graph_function._call_flat(\n\u001b[0m\u001b[1;32m   2454\u001b[0m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[1;32m   2455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1858\u001b[0m         and executing_eagerly):\n\u001b[1;32m   1859\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1860\u001b[0;31m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0m\u001b[1;32m   1861\u001b[0m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[1;32m   1862\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    495\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0m_InterpolateFunctionError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    496\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcancellation_manager\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 497\u001b[0;31m           outputs = execute.execute(\n\u001b[0m\u001b[1;32m    498\u001b[0m               \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    499\u001b[0m               \u001b[0mnum_outputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_outputs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     52\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 54\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     55\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     56\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/preprocessing/image.py\", line 110, in __getitem__\n",
            "    return self._get_batches_of_transformed_samples(index_array)\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/utils/data_utils.py\", line 580, in get_index\n",
            "    return _SHARED_SEQUENCES[uid][i]\n",
            "  File \"/usr/lib/python3.8/multiprocessing/pool.py\", line 125, in worker\n",
            "    result = (True, func(*args, **kwds))\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/preprocessing/image.py\", line 350, in _get_batches_of_transformed_samples\n",
            "    x = self.image_data_generator.apply_transform(x, params)\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/preprocessing/image.py\", line 110, in __getitem__\n",
            "    return self._get_batches_of_transformed_samples(index_array)\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/utils/data_utils.py\", line 580, in get_index\n",
            "    return _SHARED_SEQUENCES[uid][i]\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/preprocessing/image.py\", line 337, in _get_batches_of_transformed_samples\n",
            "    img = image_utils.load_img(\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/preprocessing/image.py\", line 1800, in apply_transform\n",
            "    x = apply_affine_transform(\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/utils/image_utils.py\", line 443, in load_img\n",
            "    img = img.resize(width_height_tuple, resample)\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/preprocessing/image.py\", line 2324, in apply_affine_transform\n",
            "    channel_images = [ndimage.interpolation.affine_transform(  # pylint: disable=g-complex-comprehension\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/PIL/Image.py\", line 1886, in resize\n",
            "    self.load()\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/preprocessing/image.py\", line 110, in __getitem__\n",
            "    return self._get_batches_of_transformed_samples(index_array)\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/preprocessing/image.py\", line 2324, in <listcomp>\n",
            "    channel_images = [ndimage.interpolation.affine_transform(  # pylint: disable=g-complex-comprehension\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/PIL/ImageFile.py\", line 251, in load\n",
            "    n, err_code = decoder.decode(b)\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/scipy/ndimage/interpolation.py\", line 611, in affine_transform\n",
            "    _nd_image.geometric_transform(filtered, None, None, matrix, offset,\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/preprocessing/image.py\", line 350, in _get_batches_of_transformed_samples\n",
            "    x = self.image_data_generator.apply_transform(x, params)\n",
            "KeyboardInterrupt\n",
            "KeyboardInterrupt\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/preprocessing/image.py\", line 1800, in apply_transform\n",
            "    x = apply_affine_transform(\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/preprocessing/image.py\", line 2324, in apply_affine_transform\n",
            "    channel_images = [ndimage.interpolation.affine_transform(  # pylint: disable=g-complex-comprehension\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/keras/preprocessing/image.py\", line 2324, in <listcomp>\n",
            "    channel_images = [ndimage.interpolation.affine_transform(  # pylint: disable=g-complex-comprehension\n",
            "  File \"/usr/local/lib/python3.8/dist-packages/scipy/ndimage/interpolation.py\", line 611, in affine_transform\n",
            "    _nd_image.geometric_transform(filtered, None, None, matrix, offset,\n",
            "KeyboardInterrupt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs_x = range(len(acc))\n",
        "\n",
        "plt.plot(epochs_x, acc, 'co', label='Training acc')\n",
        "plt.plot(epochs_x, val_acc, 'k', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs_x, loss, 'co', label='Training loss')\n",
        "plt.plot(epochs_x, val_loss, 'k', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "3MHPPZCL3p3b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# multiply_16\n",
        "# set 'multiply_16' and following layers trainable\n",
        "conv_base.trainable = True\n",
        "\n",
        "set_trainable = False\n",
        "for layer in conv_base.layers:\n",
        "    if layer.name == 'multiply_16':\n",
        "        set_trainable = True\n",
        "    if set_trainable:\n",
        "        layer.trainable = True\n",
        "    else:\n",
        "        layer.trainable = False"
      ],
      "metadata": {
        "id": "7RFg3ibH1yuq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss='categorical_crossentropy',\n",
        "              optimizer=optimizers.RMSprop(lr=2e-5),\n",
        "              metrics=['acc'])\n",
        "\n",
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch= NUM_TRAIN //batch_size,\n",
        "      epochs=epochs,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps= NUM_TEST //batch_size,\n",
        "      verbose=1,\n",
        "      use_multiprocessing=True,\n",
        "      workers=4)"
      ],
      "metadata": {
        "id": "HJKan4DDU2gZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "acc = history.history['acc']\n",
        "val_acc = history.history['val_acc']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs_x = range(len(acc))\n",
        "\n",
        "plt.plot(epochs_x, acc, 'co', label='Training acc')\n",
        "plt.plot(epochs_x, val_acc, 'k', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs_x, loss, 'co', label='Training loss')\n",
        "plt.plot(epochs_x, val_loss, 'k', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "TK5eNddOU-cW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Download the model\n"
      ],
      "metadata": {
        "id": "WqkEKnt-Xk6-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "os.makedirs('/content/drive/My Drive/cut_panoramic/Model', exist_ok=True)\n",
        "model.save('/content/drive/My Drive/cut_panoramic/Model/รอบ2_Flimpano_Female125_250.h5')"
      ],
      "metadata": {
        "id": "nfgxYMk9Xlhq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5sdHlnyzd_bV"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}